name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://apexsalesai.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prisma generate
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          # Build-time environment variables
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          NEXT_PUBLIC_DATAVERSE_URL: ${{ secrets.NEXT_PUBLIC_DATAVERSE_URL }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes > deployment-url.txt
          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Wait for deployment
        run: sleep 30

      - name: Smoke test - Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://apexsalesai.com)
          if [ $response -eq 200 ] || [ $response -eq 301 ] || [ $response -eq 302 ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
          else
            echo "‚ùå Health check failed (HTTP $response)"
            exit 1
          fi

      - name: Smoke test - API endpoint
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://apexsalesai.com/api/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ö†Ô∏è API health check returned HTTP $response (non-critical)"
          fi
        continue-on-error: true

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "URL: https://apexsalesai.com"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check logs for details"
          exit 1

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Trigger rollback
        run: |
          echo "‚ö†Ô∏è Deployment failed - manual rollback required"
          echo "Visit Vercel dashboard to rollback to previous deployment"
          echo "https://vercel.com/dashboard"
