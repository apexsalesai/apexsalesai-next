generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id           Int      @id @default(autoincrement())
  name         String
  orgId        String   @unique
  domain       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        User[]
  leads        Lead[]
  featureFlags FeatureFlag[]
  auditLogs    AuditLog[]
  observabilityEvents ObservabilityEvent[]
  sequenceDefinitions SequenceDefinition[]
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  name          String
  role          String   // e.g. 'admin', 'agent', 'manager'
  tenant        Tenant     @relation(fields: [tenantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  tenantId      Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  agent         Agent?
  assignedLeads Lead[]     @relation("AssignedToUser")
  auditLogs     AuditLog[]
}

model Lead {
  id               Int           @id @default(autoincrement())
  tenant           Tenant?       @relation(fields: [tenantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  tenantId         Int?
  
  // Support both formats
  name             String
  firstName        String?       // For seed compatibility
  lastName         String?       // For seed compatibility
  company          String?       // For seed compatibility
  
  email            String
  industry         String?
  stage            String?
  status           String?       // For sequence status
  confidence_score Float?
  source           String?
  assignedTo       User?         @relation("AssignedToUser", fields: [assignedToId], references: [id])
  assignedToId     Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  agentActions     AgentAction[]
  gdprRequests     GDPRRequest[]
  sequenceStates   SequenceState[]
  sequenceExecutions SequenceExecution[]
}

model Agent {
  id        Int      @id @default(autoincrement())
  name      String   // Agent name (Max, Mia, DemoBot)
  role      String   // Agent role description
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @unique
  model     String   @default("gpt-4o-mini") // e.g. 'gpt-4o', 'custom'
  status    String   @default("active") // e.g. 'active', 'inactive'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actions   AgentAction[]
}

// Standalone agents for seed compatibility
model AgentProfile {
  id        String   @id @default(cuid())
  name      String
  role      String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actions   AgentActionLog[]
  
  @@map("agent_profiles")
}

model AgentAction {
  id                Int                @id @default(autoincrement())
  agent             Agent              @relation(fields: [agentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  agentId           Int
  lead              Lead               @relation(fields: [leadId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  leadId            Int
  action            String             // e.g. 'book_meeting', 'send_email', 'escalate', 'nurture'
  priority          String             // e.g. 'high', 'low'
  confidence        Float
  reason            String?
  createdAt         DateTime           @default(now())
  executionResult   String?            // JSON string of execution result
  status            String             @default("executed") // 'executed', 'pending', 'overridden'
  overrideReason    String?            // Reason if action was overridden by human
  overriddenBy      Int?               // User ID who overrode the action
  executionDuration Int?               // Duration in milliseconds
  roiImpact         Float?             // Estimated ROI impact
  sequenceExecution SequenceExecution? @relation(fields: [sequenceExecutionId], references: [id])
  sequenceExecutionId Int?
}

model FeatureFlag {
  id        Int      @id @default(autoincrement())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  tenantId  Int
  name      String
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  tenantId   Int
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  
  // Phase 2-3 required fields
  actorId    String?  // Actor performing action (can be system/user/agent)
  orgId      String?  // Organization ID
  action     String   // publish_blog|send_email|post_social|retry|error|agent.run|asset.create
  targetType String?  // campaign|asset|email|post|agentTask
  targetId   String?  // ID of target entity
  before     Json?    // State before action
  after      Json?    // State after action
  externalId String?  // External system ID (messageId, postId, etc.)
  status     String   @default("success") // success|error|pending
  
  // Legacy fields
  details    String?  // Legacy details field
  createdAt  DateTime @default(now())
}

model AuthToken {
  id            Int      @id @default(autoincrement())
  provider      String   // e.g., 'dataverse', 'hubspot', 'salesforce'
  access_token  String
  refresh_token String?
  expires_at    DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  userId        Int
  tenantId      Int
  metadata      String?  // JSON string for additional provider-specific data
}

model ObservabilityEvent {
  id        Int      @id @default(autoincrement())
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  tenantId  Int?
  
  // Support both formats
  type      String?  // e.g. 'API_CALL', 'ERROR', 'METRIC', 'ALERT'
  source    String?  // For seed (agent, system, etc.)
  level     String?  // For seed (info, warning, error)
  
  message   String
  meta      String?
  data      Json?    // For seed structured data
  
  occurredAt DateTime? // For seed
  createdAt DateTime @default(now())
}

model GDPRRequest {
  id        Int      @id @default(autoincrement())
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    Int
  type      String   // 'forget' or 'export'
  status    String   // 'pending', 'completed', 'failed'
  requestedAt DateTime @default(now())
  completedAt DateTime?
}

// Sequence Engine Models
model SequenceDefinition {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  type        String?         // e.g., 'real_estate_lead_qualification', 'mortgage_doc_chase'
  tenant      Tenant?         @relation(fields: [tenantId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  tenantId    Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  steps       SequenceStep[]
  states      SequenceState[]
  executions  SequenceExecution[]
}

model SequenceStep {
  id                 Int               @id @default(autoincrement())
  sequence           SequenceDefinition @relation(fields: [sequenceDefinitionId], references: [id])
  sequenceDefinitionId Int
  
  // Support both formats
  stepId             String?           // e.g., 'intake', 'qualification'
  order              Int?              // For seed (1, 2, 3...)
  type               String?           // For seed (email, call, social)
  delayHours         Int?              // For seed
  
  name               String
  description        String?
  action             String?           // Action to execute
  conditions         Json?             // JSON conditions for branching logic
  nextSteps          Json?             // JSON array of possible next steps
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  executions         SequenceExecution[]
}

model SequenceState {
  id                 Int               @id @default(autoincrement())
  sequence           SequenceDefinition @relation(fields: [sequenceDefinitionId], references: [id])
  sequenceDefinitionId Int
  lead               Lead              @relation(fields: [leadId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  leadId             Int
  currentStepId      String
  context            Json              // JSON object with sequence context
  status             String            // 'active', 'completed', 'failed'
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  executions         SequenceExecution[]
}

model SequenceExecution {
  id                 Int               @id @default(autoincrement())
  
  // Support both patterns
  state              SequenceState?    @relation(fields: [sequenceStateId], references: [id])
  sequenceStateId    Int?
  step               SequenceStep?     @relation(fields: [sequenceStepId], references: [id])
  sequenceStepId     Int?
  
  // Direct sequence + lead support (for seed)
  sequence           SequenceDefinition? @relation(fields: [sequenceDefinitionId], references: [id])
  sequenceDefinitionId Int?
  lead               Lead?             @relation(fields: [leadId], references: [id])
  leadId             Int?
  
  status             String?           // queued, in_progress, completed, failed
  startedAt          DateTime?         
  completedAt        DateTime?         
  metadata           Json?             
  
  executionTime      DateTime          @default(now())
  result             Json?             // JSON result of execution
  nextStepId         String?
  agentActions       AgentAction[]
  agentActionLogs    AgentActionLog[]
  metrics            SequenceMetrics?
}

model SequenceMetrics {
  id                 Int               @id @default(autoincrement())
  execution          SequenceExecution @relation(fields: [sequenceExecutionId], references: [id])
  sequenceExecutionId Int               @unique
  timeSavedMinutes   Float?
  revenueImpact      Float?
  costSavings        Float?
  confidenceScore    Float?
  createdAt          DateTime          @default(now())
}

// ============================================================================
// BLOG & CONTENT ENGINE MODELS
// ============================================================================

enum BlogPostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model BlogPost {
  id              String         @id @default(cuid())
  slug            String         @unique
  
  // Content
  title           String
  content         String         @db.Text
  excerpt         String         @db.Text
  image           String?
  
  // Governance & Compliance
  generatedBy     String?        // "Max Content Agent", "Human", "Claude-3"
  generatedByUserId String?      // User ID who triggered generation
  approvedBy      String?        // User ID who approved for publishing
  approvedAt      DateTime?
  
  // Audit Trail
  createdBy       String         // User ID who created
  createdByEmail  String?
  lastModifiedBy  String?        // User ID of last editor
  lastModifiedAt  DateTime?
  
  // AI Generation Metadata
  generationModel String?        // "gpt-4o", "claude-3-opus", etc.
  generationCost  Decimal?       @db.Decimal(8, 4)
  generationTokens Int?
  generationTime  Int?           // milliseconds
  
  // Compliance
  complianceChecked Boolean      @default(false)
  complianceStatus  String?      // "approved", "flagged", "rejected"
  complianceNotes   String?      @db.Text
  
  // Publishing
  author          String         @default("ApexSalesAI Editorial Team")
  authorEmail     String?
  publishedAt     DateTime?
  publishedBy     String?        // User ID who published
  
  // Status & Workflow
  status          BlogPostStatus @default(DRAFT)
  scheduledFor    DateTime?      // For scheduled publishing
  
  // SEO Metadata
  metaTitle       String?
  metaDescription String?        @db.Text
  keywords        String[]       @default([])
  canonicalUrl    String?
  
  // Categorization
  tags            String[]       @default([])
  category        String?
  
  // Syndication
  syndicatedTo    String[]       @default([]) // ["LinkedIn", "Medium"]
  syndicationUrls Json?          // { "LinkedIn": "url", "Medium": "url" }
  
  // Version Control
  version         Int            @default(1)
  previousVersionId String?
  previousVersion BlogPost?      @relation("BlogPostVersions", fields: [previousVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersions    BlogPost[]     @relation("BlogPostVersions")
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  engagement      PostEngagement[]
  events          BlogAnalyticsEvent[]
  
  @@index([status, publishedAt])
  @@index([slug])
  @@index([generatedBy])
  @@index([approvedBy])
  @@index([createdBy])
  @@index([complianceStatus])
  @@map("blog_posts")
}

// Separate engagement table for scalable analytics (time-series data)
model PostEngagement {
  id              String   @id @default(cuid())
  postId          String
  post            BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Time-series metrics (daily aggregates)
  date            DateTime @db.Date
  
  // Engagement Metrics
  views           Int      @default(0)
  uniqueViews     Int      @default(0)
  avgTimeOnPage   Int      @default(0) // seconds
  bounceRate      Decimal  @default(0) @db.Decimal(5, 4)
  
  // Social Metrics
  shares          Int      @default(0)
  likes           Int      @default(0)
  comments        Int      @default(0)
  
  // Conversion Metrics
  leadConversions Int      @default(0)
  demoRequests    Int      @default(0)
  revenueInfluence Decimal @default(0) @db.Decimal(12, 2)
  
  // Traffic Sources
  organicTraffic  Int      @default(0)
  socialTraffic   Int      @default(0)
  directTraffic   Int      @default(0)
  referralTraffic Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([postId, date])
  @@index([date])
  @@map("post_engagement")
}

// Analytics Event Logging (writes to Application Insights + Dataverse)
model BlogAnalyticsEvent {
  id          String   @id @default(cuid())
  postId      String
  post        BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Event Details
  eventType   String   // "view", "share", "like", "conversion", "demo_request"
  userId      String?
  sessionId   String?
  
  // Metadata
  metadata    Json?    // Additional event data
  
  // Application Insights Integration
  appInsightsEventId String? // Reference to App Insights event
  appInsightsSent    Boolean @default(false)
  
  // Dataverse Integration (for agent performance tracking)
  dataverseRecordId  String?
  dataverseSynced    Boolean @default(false)
  
  createdAt   DateTime @default(now())
  
  @@index([postId, eventType])
  @@index([createdAt])
  @@index([appInsightsSent])
  @@index([dataverseSynced])
  @@map("blog_analytics_events")
}

// ============================================================================
// PHASE 2: MULTI-AGENT ORCHESTRATION & CAMPAIGN STUDIO
// ============================================================================

model Campaign {
  id             String        @id @default(cuid())
  title          String
  objective      String        @db.Text
  audience       String        @db.Text
  brandVoice     String        @db.Text
  channels       String[]      // ["blog","social","email","video","chat","faq","press","ad","community"]
  status         String        @default("draft") // draft|running|completed|error
  
  // Content length control
  targetLength   String        @default("medium") // short|medium|long|extended
  
  // User tracking
  createdById    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relations
  tasks          AgentTask[]
  assets         ContentAsset[]
  
  @@index([status, createdAt])
  @@index([createdById])
  @@map("campaigns")
}

model AgentTask {
  id            String   @id @default(cuid())
  campaignId    String
  agentType     String   // strategy|copy|visual|video|personalize
  status        String   @default("queued") // queued|running|done|error
  
  // Input/Output
  input         Json
  output        Json?
  
  // Telemetry
  tokensIn      Int      @default(0)
  tokensOut     Int      @default(0)
  latencyMs     Int      @default(0)
  model         String   @default("gpt-4o-mini")
  costUsd       Decimal  @db.Decimal(10,6) @default(0)
  error         String?  @db.Text
  
  // Legacy fields (kept for compatibility)
  costTokensIn  Int      @default(0)
  costTokensOut Int      @default(0)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Relations
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([campaignId, agentType])
  @@index([status])
  @@map("agent_tasks")
}

model ContentAsset {
  id          String   @id @default(cuid())
  campaignId  String
  type        String   // blog|email|social|videoScript|imagePrompt|chat|faq|press|ad|community
  title       String
  body        String   @db.Text
  
  // Metadata
  metadata    Json     // platform, wordCount, charCount, readingTime, etc.
  
  // Version control
  version     Int      @default(1)
  parentId    String?  // For revision history
  
  // Publishing
  status      String   @default("draft") // draft|published|archived
  publishedAt DateTime?
  publishedTo String[] @default([]) // ["linkedin","twitter","blog"]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([campaignId, type])
  @@index([status])
  @@map("content_assets")
}

model ManualTask {
  id        String   @id @default(cuid())
  type      String   // email_retry|linkedin_post_retry|x_post_retry|agent_retry
  payload   Json     // Task-specific data
  priority  Int      @default(5) // 1-10, higher = more urgent
  status    String   @default("open") // open|in_progress|completed|failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status, priority])
  @@map("manual_tasks")
}

model ScheduledPublish {
  id          String   @id @default(cuid())
  assetId     String
  channel     String   // blog|email|linkedin|x
  scheduledAt DateTime
  payload     Json     // Channel-specific data (to, subject, slug, etc.)
  status      String   @default("pending") // pending|processing|completed|failed
  processedAt DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([scheduledAt, status])
  @@index([assetId])
  @@map("scheduled_publishes")
}

model MetricEvent {
  id         String   @id @default(cuid())
  
  // Support both formats
  name       String?  // "agent.cost" | "agent.latency" | "ui.error"
  metric     String?  // For seed format
  
  value      Float
  unit       String?  // "tokens" | "ms"
  dims       Json?    // dimensions: { agent: "copy", campaign: "xyz" }
  dimensions Json?    // For seed format
  
  occurredAt DateTime? // For seed
  createdAt  DateTime @default(now())
  
  @@index([name, createdAt])
  @@index([metric, createdAt])
  @@map("metric_events")
}

// Agent action logs for standalone agents
model AgentActionLog {
  id                String             @id @default(cuid())
  agent             AgentProfile?      @relation(fields: [agentId], references: [id])
  agentId           String?
  sequenceExecution SequenceExecution? @relation(fields: [sequenceExecutionId], references: [id])
  sequenceExecutionId Int?
  
  type              String
  status            String
  input             Json
  output            Json?
  createdAt         DateTime           @default(now())
  
  @@map("agent_action_logs")
}

model Integration {
  id           String   @id @default(cuid())
  userId       String
  provider     String   // "salesforce" | "linkedin" | "twitter"
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  instanceUrl  String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([userId, provider])
  @@index([userId])
  @@map("integrations")
}

// ============================================
// PHASE 7: PUBLISHING & CAREER COMPANION
// ============================================

model PublishJob {
  id           String    @id @default(cuid())
  orgId        String?
  userId       String
  assetId      String
  platform     String    // linkedin|x|youtube|instagram|tiktok|wordpress|reddit|pinterest|facebook
  status       String    @default("queued") // queued|posting|success|failed|cancelled
  scheduledAt  DateTime?
  postedAt     DateTime?
  postUrl      String?
  errorMessage String?   @db.Text
  impressions  Int       @default(0)
  clicks       Int       @default(0)
  engagement   Float     @default(0)
  metadata     Json?     // platform-specific data
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([assetId])
  @@index([status])
  @@index([scheduledAt])
  @@map("publish_jobs")
}

model OAuthToken {
  id         String    @id @default(cuid())
  userId     String
  platform   String    // linkedin|x|instagram|tiktok|youtube|wordpress|facebook|pinterest|reddit
  accessToken  String  @db.Text // encrypted
  refreshToken String? @db.Text // encrypted
  expiresAt  DateTime?
  scope      String?
  metadata   Json?     // platform-specific data
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, platform])
  @@index([userId])
  @@map("oauth_tokens")
}

model CareerProfile {
  id            String   @id @default(cuid())
  userId        String
  label         String   // "PM - AI", "Tech Lead", etc.
  headline      String?
  summary       String?  @db.Text
  skills        String[] // Array of skills
  portfolioUrls String[] // Array of portfolio URLs
  socialLinks   Json?    // { linkedin: "", github: "", twitter: "" }
  resumeUrl     String?
  visibility    String   @default("private") // private|org|public
  metadata      Json?    // additional career data
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  resumes       Resume[]
  jobAnalyses   JobAnalysis[]

  @@unique([userId, label])
  @@index([userId])
  @@index([visibility])
  @@map("career_profiles")
}

model Resume {
  id               String   @id @default(cuid())
  profileId        String
  storagePath      String   // /uploads/resumes/filename.pdf
  parsedJson       Json     // Structured resume data
  originalFilename String
  mimetype         String
  bytes            Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  profile CareerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@map("resumes")
}

model JobAnalysis {
  id           String   @id @default(cuid())
  profileId    String
  jobSource    String   // "upload" | "paste" | "url"
  rawText      String   @db.Text
  parsedJson   Json     // Extracted job requirements
  fitScore     Int?     // 0-100
  matchSummary Json?    // { matchingSkills, missingSkills, rationale }
  generated    Json?    // { resume, coverLetter, linkedinAbout }
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile CareerProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([createdAt])
  @@map("job_analyses")
}

model ContentPerformance {
  id           String   @id @default(cuid())
  assetId      String
  platform     String   // linkedin|x|youtube|instagram|tiktok|wordpress|reddit|pinterest|facebook
  impressions  Int      @default(0)
  clicks       Int      @default(0)
  engagement   Float    @default(0)
  conversions  Int      @default(0)
  spendUsd     Float    @default(0)
  periodStart  DateTime
  periodEnd    DateTime
  insights     Json?    // AI-generated insights
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([assetId])
  @@index([platform])
  @@index([periodStart])
  @@map("content_performance")
}
